#!/bin/bash

echo -ne '
  -------------------------------------------------
  ----------------------ABOUT----------------------
  -------------------------------------------------
  Offensive security deployment script to establish
  a base tool set and file structure for efficiency
  on penetration testing and red teaming engagements.
  -------------------------------------------------
  This script is written for debian-based systems 
  and is meant to be a general, high-level deployment
  script to establish a base set of tooling which can
  then be expanded upon according to specific 
  engagement/mission needs. 
  -------------------------------------------------
  The script installs general utilities/QoL tools, 
  offsec tooling, compilers, and other useful tools
  -------------------------------------------------
  The script is written using principles of OOP in 
  order to be versatile and modular. Setup, 
  environment, and general tooling are required 
  for the other functions to work.
  -------------------------------------------------
  -----------------JEREMY LARATRO-----------------
  -------------------------------------------------
'

parse(){
  if [ $# -eq 0 ]; then
    help
    return 1
  fi
  while getopts ainwplrh opt; do
    case $opt in
         a) all="SET";;
         i) web_tools="SET";;
         n) network_tools="SET";;
         w) windows_tools="SET";;
         p) post_exploitation_tools="SET";;
         l) wordlists="SET";;
         r) reverse_engineering_tools="SET";;
         h) help="SET";;
         ?) echo "Unknown option: -$OPTARG"; help; return 1;;
        
    esac
done

  # Check if the flags are set
  if [ "$all" = "SET" ]; then
      echo -ne "
      All categories selected\n"
      setup
      file_struct
      environment
      general_tools
      web_tools
	  windows_tools
	  wordlists
	  reverse_engineering_tools
	  post_exploitation_tools
  fi
  
  if [ "$web_tools" = "SET" ]; then
      echo -ne "
      Web tools flag is set\n"
      setup
      file_struct
      environment
      general_tools
      web_tools
  fi
  
  if [ "$network_tools" = "SET" ]; then
      echo -ne "
      Network tools selected\n"
      setup
      file_struct
      environment
      general_tools
      network_tools	
  fi
  
  if [ "$windows_tools" = "SET" ]; then
      echo -ne "
      Windows tools selected\n"
      setup
      file_struct
      environment
      general_tools
      windows_tools
  fi
  
  if [ "$post_exploitation_tools" = "SET" ]; then
      echo -ne "Post-exploitation tools selected"
      setup
      file_struct
      environment
      general_tools
      post_exploitation_tools
  fi
  
  if [ "$wordlists" = "SET" ]; then
      echo -ne "
      Wordlists flag selected\n"
      setup
      file_struct
      environment
      general_tools
      wordlists
  fi
  
  if [ "$reverse_engineering_tools" = "SET" ]; then
      echo -ne "
      Reverse engineering tools selected\n"
      setup
      file_struct
      environment
      general_tools
      reverse_engineering_tools
  fi
  if [ "$help" = "SET" ]; then
      echo -ne "
      Help selected\n"
      help
  fi
  
}

#--------------------------
# Help
#--------------------------	
help(){
  echo '
  -------------------------------------------------
  --------------------Switches---------------------
  -------------------------------------------------
  web tools: -i --web
  network tools: -n --network
  windows tools: -w --windows 
  post-exploitation tools: -p --post
  wordlists: -l --wordlists
  reverse engineering tools: -r --reverse
  -------------------------------------------------
  '	
  echo "
  -------------------------------------------------
  -----------------Function Calls------------------
  -------------------------------------------------
  --------------------Required---------------------
  -------------------------------------------------
  -- setup
  -- file_struct
  -- environment
  -- general_tools
  -------------------------------------------------
  --------------------Optional---------------------
  -------------------------------------------------
  -- web_tools
  -- windows_tools
  -- wordlists
  -- reverse_engineering_tools
  -- post_exploitation_tools
  -------------------------------------------------
  "
}

#--------------------------
# Setup
#--------------------------
setup() {
  for i in $(seq 1 10); do echo -n "---"; sleep 0.05; done; echo -ne "\nCreating a directory/file structure for organization\n"; for i in $(seq 1 10); do echo -n "---"; sleep 0.05; done;
  mkdir ~/Documents/tools
  mkdir ~/Documents/scripts
  mkdir ~/Documents/labs
  mkdir ~/Documents/wordlists
  mkdir ~/Documents/screenshots
}

#--------------------------
# Exports
#--------------------------
file_struct(){
  for i in $(seq 1 10); do echo -n "---"; sleep 0.05; done; echo -ne "\nExporting directories for easy access\n"; for i in $(seq 1 10); do echo -n "---"; sleep 0.05; done;
  export tools=~/Documents/tools
  export scripts=~/Documents/scripts
  export labs=~/Documents/labs
  export wordlists=~/Documents/wordlists
}

#--------------------------
# Visualization Aid
#--------------------------
loop(){
  echo -n ''
  for i in $(seq 1 10); do echo -n "---"; sleep 0.05; done; echo -ne "\nInstalling $current_category\n"; for i in $(seq 1 10); do echo -n "---"; sleep 0.05; done;
  echo -n ''
}

#-----------------------------
# Environment
#--------------------------
environment() {
  echo -ne 'Using Python:' $(ls /usr/bin/python* | grep python | head -1)
  # OhMyZsh Install
  export current_category='environment utilities'
  loop
  echo -ne ' 
  
  '
  sudo apt install zsh sudo sh-autosuggestions zsh-syntax-highlighting
  echo '-----------------------------'
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  #PyEnv Install
  curl https://pyenv.run | bash

  echo $0;
  if [[ $0 == *bash* ]]; then
    #BASH
    echo 'tools=~/Documents/tools' >> ~/.bashrc
    echo 'scripts=~/Documents/scripts' >> ~/.bashrc
    echo 'labs=~/Documents/labs' >> ~/.bashrc
    echo 'wordlists=~/Documents/wordlists' >> ~/.bashrc
    sudo echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
    sudo echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
    sudo echo 'eval "$(pyenv init -)"' >> ~/.bashrc
    source ~/.bashrc
  elif [[ $0 == *zsh* ]]; then
    #ZSH
    echo 'tools=~/Documents/tools' >> ~/.zshrc
    echo 'scripts=~/Documents/scripts' >> ~/.zshrc
    echo 'labs=~/Documents/labs' >> ~/.zshrc
    echo 'wordlists=~/Documents/wordlists' >> ~/.zshrc
    echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrc
    echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrc
    echo 'eval "$(pyenv init -)"' >> ~/.zshrc
    source ~/.zshrc
  else
    echo "Manual config for pyenv may be necessary"
  fi
}  
  
# --------------------------------
# General
#--------------------------
general_tools(){
# general useful tools and compilers
  export current_category='general tools, utilities, and compilers'
  loop
  echo -ne ' 
  
  '
  sudo apt update
  sudo apt install docker.io golang-go geany aptitude ruby gcc g++ clang rust-all cmake flameshot python-is-python3 perl p7zip-full 
  python3 -m pip install pipx
}

#--------------------------
#Web 
#-------------------------- 
web_tools() {
# Tools for targeting web-based targets
  export current_category='web tools'
  loop
  echo -ne ' 
  
  '
  go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
  go install github.com/OJ/gobuster/v3@latest
  go install github.com/jaeles-project/gospider@latest
  go install github.com/ffuf/ffuf/v2@latest
  gem install wpscan --user-install
  cd $tools && mkdir web; cd web && git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git; cd sqlmap/
  sudo ln -s $(pwd)/sqlmap.py /usr/local/bin/sqlmap
  cd $tools/web
  git clone https://github.com/urbanadventurer/WhatWeb.git; cd WhatWeb/
  sudo ln -s $(pwd)/whatweb /usr/local/bin/whatweb
  cd $tools/web
  git clone https://github.com/darkoperator/dnsrecon.git
  wget https://github.com/frohoff/ysoserial/releases/latest/download/ysoserial-all.jar
}

#--------------------------
# Windows
#--------------------------
windows_tools(){
#tools for targeting windows/active directory
  export current_category='windows tools'
  loop
  echo -ne ' 
  
  '
  cd $tools && mkdir windows ; cd $tools/windows
  git clone https://github.com/lgandx/Responder ; cd $tools/Responder ; pip install -r requirements.txt
  sudo ln -s $(pwd)/Responder.py /usr/local/bin/responder
  cd $tools/windows
  wget https://github.com/RedTeamPentesting/pretender/releases/download/v1.2.0/pretender_Linux_x86_64.tar.gz ; tar -xzvf pretender_Linux_x86_64.tar.gz
  chmod +x pretender
  sudo ln -s $(pwd)/pretender /usr/local/bin/pretender
  cd $tools/windows
  pip install impacket ldapdomaindump pyopenssl pycryptodomex crosslinked
  gem install evil-winrm --user-install
  cd $tools/windows
  wget https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_linux_amd64 -O kerbrute
  chmod +x kerbrute
  sudo ln -s $(pwd)/kerbrute /usr/local/bin/kerbrute
  go install github.com/jpillora/chisel@latest
  git clone https://github.com/dirkjanm/krbrelayx.git
  #git clone https://github.com/mpgn/CrackMapExec
  #cd CrackMapExec
  #python3 -m pipx install .
 

}
# ----------------------------
# Wordlists / Payloads
#--------------------------
wordlists() {
  export current_category='wordlists'
  loop
  echo -ne ' 
  
  '
  cd $wordlists
  git clone https://github.com/danielmiessler/SecLists.git
  git clone https://github.com/swisskyrepo/PayloadsAllTheThings.git
  git clone https://github.com/trickest/wordlists.git
  git clone https://github.com/3ndG4me/KaliLists.git
  wget https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt
	
}

#--------------------------
# Post-exploit
#--------------------------
post_exploitation_tools(){
  export current_category='post exploitation tools'
  loop
  echo -ne ' 
  
  '
  cd $tools && mkdir postexploit ; cd postexploit
  curl https://sliver.sh/install|sudo bash
  git clone https://github.com/CiscoCXSecurity/enum4linux.git; cd enum4linux
  sudo ln -s $(pwd)/enum4linux.pl /usr/local/bin/enum4linux
  cd $tools/postexploit
  git clone https://github.com/carlospolop/PEASS-ng.git
  pip install smbmap 
  sudo apt install smbclient cifs-utils ftp smbmap telnet 
  cd $tools/postexploit
  wget https://hashcat.net/files/hashcat-6.2.6.7z; 7z x hashcat-6.2.6.7z -hashcat/
  sudo ln -s $(pwd)/hashcat.bin /usr/local/bin/hashcat
  sudo apt install john
  git clone https://gitlab.com/exploit-database/exploitdb.git /opt/exploitdb
  sudo ln -sf /opt/exploitdb/searchsploit /usr/local/bin/searchsploit

  #cd $tools/postexploit ; mkdir john_src ; cd john_src ; git clone https://github.com/openwall/john -b bleeding-jumbo john
  #cd $tools/postexploit/john_src/john/src
  #./configure && make -s clean && make -sj4
}
 
#--------------------------  
# Network
#--------------------------
network_tools() {
  export current_category='network tools'
  loop  
  echo -ne ' 
  
  '
  sudo apt install proxychains4 nmap wireshark tcpdump inetutils-traceroute tor sshuttle
  wget https://github.com/RustScan/RustScan/releases/download/2.0.1/rustscan_2.0.1_amd64.deb ; sudo dpkg -i rustscan_2.0.1_amd64.deb ; rm *dpkg
  
}
#--------------------------
# Reverse Engineering 
#--------------------------
reverse_engineering_tools(){
  export current_category='reverse engineering tools'
  loop
  echo -ne ' 
  
  '
  sudo apt-get install git libssl-dev libffi-dev build-essential ltrace xxd edb-debugger
  
  #pwntools
  python3 -m pip install --upgrade pip
  python3 -m pip install --upgrade pwntools
  
  # radere
  cd $tools; mkdir rev_eng ; cd rev_eng
  git clone https://github.com/radareorg/radare2
  sh radare2/sys/install.sh
  
  #angr
  pip install angr
  
  #edb - install from source (uncomment if you want to compile from source and remove apt package)
  #cd $tools/rev_eng; git clone --recursive https://github.com/eteran/edb-debugger.git
   # cd edb-debugger
  #mkdir build
 # cd build
  #cmake ..
 # make
 # chmod +x edb
 # sudo ln -s $(pwd)/edb /usr/local/bin/edb

}

parse "$@"
