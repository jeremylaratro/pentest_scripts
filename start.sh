#!/bin/bash
opts='i:d:x:nlbawshv'
while getopts $opts arg; do
  case $arg in
    i ) ip=$OPTARG;;
    d ) domain=$OPTARG;;
    l ) lfi=1;;
    s ) sub=1;;
    w ) web=1;;
    n ) nmap=1;;
    a ) all=1;;
    b ) smb=1;;
    v ) exp=1;;
    h ) usage; exit 1;;
    * ) echo "unknown argument";;
  esac
done

# Shows the simple usage / syntax
usage() {
  for i in seq{1..1}; do
    echo -n "W"
    sleep 0.15s
    echo -n "E"
    sleep 0.15s
    echo -n "L"
    sleep 0.15s
    echo -n "C"
    sleep 0.15s
    echo -n "O"
    sleep 0.15s
    echo -n "M"
    sleep 0.15s
    echo -n "E"
    sleep 0.15s
  done
  echo "
-------------------------------------------------------------------------

| This is a simple script made to streamline inital discovery and        |
| enumeration for my OSCP course.                                        |
|   ----------------------------------------------------------------     |
| Usage:                                                                 |
   $(basename $BASH_SOURCE) -i 10.10.x.x -n -d example.com -v -b         
------------------------------------------------------------------------
"
  echo "
----------------------------
| Switches:                 |
|---------------------------|
| Arg required:             |
| -i ip_addr	-d domain   |
|---------------------------|
| Options (no args - on/off)|
|  -l lfi scan              |	
|  -b smb scan              |	
|  -s subdomain discovery   |	
|  -v exploit check         |	
|  -w directory enumeration |
|  -h help                  |
|  -a all                   |						
----------------------------	
"					
  echo "
Write access is required within the directory from which the script is run and root privileges necessary for nmap syn scan.										
  "  

  echo " "
}
what() {
  echo "Grabbing banner with whatweb.."
  whatweb http://$ip > ver.txt  
}
nmap_run() {
  echo -n "Starting nmap scan..."  
  for i in seq{1..10}; do
    echo -n "."
  sleep 0.15s
  done
  echo " "
  sudo nmap -sS -v -sV --top-ports 1000 $ip -oX vulnchk.xml -oG $LOGFILE
  #nmap domain check
  echo -n "Checking if domain exists..." 
  for i in seq{1..10}; do
    echo -n "."
    sleep 0.15s
  done
  echo " "
  sudo nmap $ip -p 53 -sU -Pn -v
  echo "Nmap scan complete"
  echo " "
}

web_server() {
  gobuster dir -u http://$ip --wordlist /usr/share/dirb/wordlists/big.txt -x php,txt,js,html -o $LOGFILE
  echo "Web server scan complete" -v
  echo " "
}

searchspl() {
  echo -n "Checking for known exploits..."
  for i in seq{1..10}; do
    echo -n "."
    sleep 0.15s
  done
  echo " "
  searchsploit -t --nmap vulnchk.xml 
  cat ver.txt | grep -Po 'PHP/\d.\d.' | tr '/' ' ' | xargs -i searchsploit -t {} | grep php
  cat ver.txt | grep -Po 'Apache/\d.\d.' | tr '/' ' ' | xargs -i searchsploit -t {} | grep apache
  rm ver.txt  		
}

smb_scan() {
  cat $LOGFILE | grep 139 | greprc=$?
  if [[ $greprc -eq 0 ]]; then
    echo "Found open SMB ports"
    echo " "
    enum4linux $ip
  fi
}

# still developing this function
lfi_scan() {
  cat $LOGFILE | grep php | sed -e's,^\(.* (\).*,\1,g' | cut -d ' ' -f1 > tmp.txt
  file=$(cat tmp.txt)
  for line in $file; do
    gobuster fuzz --url http://$ip/$line/?file=FUZZ -w /usr/share/wordlists/SecLists-master/Fuzzing/LFI/LFI-LFISuite-pathtotest-huge.txt -b 404,400 -o lfi_output.txt
  done
}

lfi_analysis() {
  echo "Full LFI output file available at lfi_output.txt"
  echo "Starting LFI output analysis for interesting results"
  echo " "
  nums="[0-9]+"
  for i in 200 201 202 302 301 304 305 307 308; do   
    stat=$(cat lfi_output.txt | grep -o Status=$i |   wc -l)
    echo "Status code ($i): " $stat
  done
  res=$(cat lfi_output.txt | grep -rohP Length=[0-9\.]+ | sort -u)
  for nums in $res; do
    occ=$(echo $nums && cat lfi_output.txt | grep $nums | wc -l)
    echo "Length frequencies (Length | Frequency): "$occ
    echo " "
  done
  echo "The results of this output are best analyzed manually; try searching for the least frequent results first."
  echo "For example: cat lfi_output.txt | grep Length=<output with least ocurrence>"
  echo " "
}


subd() {
  if [ ! -z "$domain" ]
  then
    sublist3r -d $domain
    dig ANY $domain @$ip
    dig ANY $domain
    dnsrecon -d $domain -n $ip -t a
  else
	
    dig ANY $ip
  fi
}

# start function create the output file to which the scans will be written. 
start() {
  echo -n "Starting in.." 
  for i in {3..1}
  do
    echo -n "$i"
    sleep 0.5
    echo -n "."
    sleep 0.25
    echo -n "."
    sleep 0.25
    echo -n "."
    sleep 0.25
    echo -n "."
    sleep 0.25
  done
  echo " "
  touch initial_scans.txt
  LOGFILE=initial_scans.txt
  echo " "
  echo "Output available at $LOGFILE"
  echo " "
}

#main function runs the scan functions after usage info and initilization has completed. 
main() {

  usage && start
 
  if [ ! -z "$nmap" ]
  then
    echo "Starting inital nmap scan on $ip using top 1000 ports."
    nmap_run
  fi
  
  if [ ! -z "$exp" ]
  then
    echo "Searching for public exploits"
    searchspl
  fi
  
  if [ ! -z "$sub" ]
  then
    echo "Starting subdomain discovery"
    subd
  fi
  
  if [ ! -z "$smb" ]
  then
    smb_scan
  fi
  
  if [ ! -z "$web" ]
  then
    echo "Gathering web server information and starting directory enumeration on http://$ip"
    what
    web_server
  fi
  
  if [ ! -z "$lfi" ]
  then
    echo "Starting PHP/LFI scan"
    lfi_scan
    lfi_analysis
  fi
  
  if [ ! -z "$all" ]
  then
    echo "All commands enabled"
    what
    nmap_run
    searchspl
    web_server
    subd
    smb_scan
    lfi_scan
    lfi_analysis
  fi

 }
main

